{
  "hash": "0139130b4314d93939b11b8ce3cd8140",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Using False Color Imagery to Visualize the Impact of the Thomas Fire in Python\"\n#description: \"blog post description (appears underneath the title in smaller text) which is included on the listing page\"\nauthor:\n  - name: Carmen Hoyt\n    url: https://ceh58.github.io/\n    #orcid: 0000-0002-5300-3075\n    affiliation: Master of Environmental Data Science Program @ The Bren School (UCSB)\n    affiliation-url: https://ucsb-meds.github.io/ \ndate: last-modified\ncategories: [Python, EDS220, Landsat] # self-defined categories\ntoc: true\n#citation: \n # url: https://ceh58.github.io/posts/2024-12-01-thomas-fire/ \nimage: thomas-fire.jpg\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\n---\n\n::: {.cell}\n::: {.cell-output-display}\n![](thomas-fire.jpg)\n:::\n:::\n\n\n\n# About\n\nThe Thomas Fire burned over 280,000 acres (about 440 square miles) across Ventura and Santa Barbara counties in December 2017, securing it as the largest wildfire in modern California history at the time. The main catalyst for the fire's rapid spread were unseasonably strong Santa Ana winds that brought warm air and low humidity. In the end, 1,063 structures were lost, over 104,607 residents were forced to leave their homes, and damages totaled over $2.2 billion. Lasting environmental effects of the fire included poor air quality (Assignment 2?!) and mudflows during the successive rainy season as a result of the burned vegetation[^1].\n\n[^1]: Read more about the Thomas fire [here](https://en.wikipedia.org/wiki/Thomas_Fire).\n\nThis analysis uses imagery taken by Landsat 8 on January 16, 2018 to highlight the burn scar left by the Thomas Fire after it was considered fully contained (January 12, 2018). By assigning infrared bands to visible colors (short wave infrared to red, near infrared to green, and red to blue), we can easily distinguish the burn scar from the surrounding vegetation. This is because bare earth/dead vegetation reflects swir (short wave infrared), appearing red, and healthy vegetation reflects nir (near infrared), appearing green[^2].\n\n[^2]: Read more about false color imagery [here](https://earthobservatory.nasa.gov/features/FalseColor).\n\n*This analysis was part of EDS 220: Working with Environmental Datasets - Homework Assignment 4 [^3].*\n\n[^3]: See the assignment guidelines [here](https://meds-eds-220.github.io/MEDS-eds-220-course/assignments/assignment4.html).\n\n# Highlights\n\n- This task explores assigning infrared bands to visible colors to obtain false color imagery.\n\n- Necessary steps include cleaning rasters and filtering geo-dataframes for the desired information.\n\n- It is essential to match Coordinate Reference Systems (CRSs) of shapefiles and images to obtain the final plot.\n\n# [Thomas Fire GitHub Repository](https://github.com/ceh58/eds220-hwk4-repeat)\n\n```\n├── data\n│  ├── thomas_fire.cpg\n│  ├── thoams_fire.dbf\n│  ├── thomas_fire.prj\n│  ├── thomas_fire.shp\n│  └── thomas_fire.shx\n├── .gitignore\n├── README.md\n├── hwk4-task2-false-color-HOYT.ipynb\n└── hwk4-task2-fire-perimeter-HOYT.ipynb\n```\n\n# Dataset Descriptions\n\nLandsat Data:\n\nA cleaned, simplified collection of bands (red, green, blue, nir, swir) from Landsat Collection 2 Level-2 (collected by Landsat 8 satellite).\n\nFire Perimeters Data:\n\nOpen-source data containing information from the spatial distrubtion of past fires in California published by the State of California and downloaded as a shapefile. \n\n# Analysis\n\n#### From `hwk4-task2-fire-perimeter-HOYT.ipynb`\n\nFirst, import all necessary packages.\n```\nimport os\nimport pandas as pd\nimport geopandas as gpd\nimport xarray as xr\n```\n\nThen, import the fire perimeters dataset and filter for the 2017 Thomas Fire. Save the filtered dataset in a format of your choice (I chose to save it as a shapefile due to its versatility and familiarity).\n\n*Note: I saved the fire perimeters dataset in my data/ folder in a separate no_push/ folder that was added to my .gitignore due to the size of the file.*\n\n```\n# Create filepath\nfp = os.path.join(\"data\", \"no_push\", \"California_Fire_Perimeters_(all).shp\")\n\n# Read in data\nfire_perimeter = gpd.read_file(fp)\n\n# Lower column names\nfire_perimeter.rename(columns=str.lower, inplace=True)\n\n# Select Thomas Fire boundary\nthomas_fire = fire_perimeter.loc[(fire_perimeter['fire_name'] == \"THOMAS\") & \n                                 (fire_perimeter['year_']== 2017)]\n                                 \n# Save Thomas Fire boundary\nthomas_fire.to_file(os.path.join(\"data\", \"thomas_fire.shp\"))\n```\n\n#### From `hwk4-task2-false-color-HOYT.ipynb`\n\nFirst, import all necessary packages.\n\n```\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport geopandas as gpd\nimport xarray as xr\nimport rioxarray as rioxr\nimport numpy as np\n```\n\nThen, import the landsat data which has been pre-processed and saved on the server at the given filepath.\n\n```\n# Import data\nfp = os.path.join(\"/courses/EDS220/data/hwk4_landsat_data\", \"landsat8-2018-01-26-sb-simplified.nc\")\nlandsat = rioxr.open_rasterio(fp)\nlandsat\n```\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](landsat_xarray.png){width=829}\n:::\n:::\n\n\n\nThe xarray has a dimension `band` of size one. This dimension is not necessary, so we will use the `squeeze()` and `drop_vars()` functions to remove it.\n\n```\n# Drop the 'band' dimension\nlandsat = landsat.squeeze().drop_vars('band')\n\n# Confirm 'band' was dropped\nprint(landsat.dims, landsat.coords)\n```\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](landsat_squeeze.png){width=714}\n:::\n:::\n\n\n\nThe next step is to plot a true color image. To do this, we must select the 'red', 'green', and 'blue' variables in that order to assign to the 'red', 'green', and 'blue' bands.\n\n```\n# Select 'red', 'green', and 'blue' variables and plot\nlandsat[['red', 'green', 'blue']].to_array().plot.imshow()\n```\n\nSince there are outlier values in these variables, the initial plot is black and white and gives us warning message:\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](true_color_1.png){width=749}\n:::\n:::\n\n\n\nIn order to de-weight the outliers and properly scale each band, we will set the `robust` parameter to True in `.imshow()`.\n\n```\n# Adjust the scale for a true color plot\nlandsat[['red', 'green', 'blue']].to_array().plot.imshow(robust = True)\n```\n\nThis produces our true color image:\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](true_color_2.png){width=708}\n:::\n:::\n\n\n\nTo create our false color image, we must assign the short wave infrared variable ('swir22') to the 'red' band, the near infrared variable ('nir08') to the 'green' band, and 'red' variable to the 'blue' band. \n\n```\n# Create a false color image\nlandsat[['swir22', 'nir08', 'red']].to_array().plot.imshow(robust = True)\n```\n\nThis produces our false color image:\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](false_color.png){width=727}\n:::\n:::\n\n\n\nFinally, we can create our burn scar map. We must import our saved Thomas Fire perimeter shapefile and make sure the CRSs match before we can plot.\n\n```\n# Import Thomas Fire shapefile\nthomas_fire = gpd.read_file(os.path.join(\"data\", \"thomas_fire.shp\"))\n\n# Make sure CRSs match\nif thomas_fire.crs == landsat.rio.crs:\n    print(\"CRSs match!\")\nelse:\n    landsat = landsat.rio.reproject(thomas_fire.crs)\n    assert landsat.rio.crs == thomas_fire.crs\n    print(\"We matched the CRSs!\")\n```\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](message.png){width=188}\n:::\n:::\n\n\n\nTo map the data,\n\n```\n# Map the false color image with the fire perimeter\nlandsat_aspect_ratio = landsat.rio.width/landsat.rio.height\n\nfig, ax = plt.subplots(figsize = (6, 6*landsat_aspect_ratio))\n\nax.axis(\"off\")\n\nlandsat[['swir22', 'nir08', 'red']].to_array().plot.imshow(ax = ax,\n                                                        robust = True)\n\nthomas_fire.boundary.plot(ax = ax,\n                         color = \"black\")\n\nax.legend(labels = [\"Fire Boundary\"])\n\nfig.text(0.5, 0.1,\n        'Data Source: CAL FIRE via Data.gov &  Microsof Planetary Computer data catalogue',\n         ha='center', va='center', fontsize=8, color='black', fontstyle='italic')\n\nfig.text(0.395, 0.08, \n         'Date Accessed: 11/19/24',\n         ha='right', va='center', fontsize=8, color='black', fontstyle='italic')\n\nax.set_title(\"Thomas Fire Scar (2017)\", fontsize=14, fontweight='bold')\n\nplt.show()\n```\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](final_plot.png){width=555}\n:::\n:::\n\n\n\nThis figure shows the burn scar from the Thomas Fire in 2017. By assigning infrared bands to visible colors (short wave infrared to red, near infrared to green, and red to blue), we can easily distinguish the burn scar from the surrounding vegetation. This is because bare earth reflects swir (short wave infrared), appearing red, and healthy vegetation reflects nir (near infrared), appearing green.\n\n# References\n\nLandsat data:\n\nMicrosoft Open Source, Matt McFarland, Rob Emanuele, Dan Morris, & Tom Augspurger. (2022). microsoft/PlanetaryComputer: October 2022 (2022.10.28). Zenodo. [https://doi.org/10.5281/zenodo.7261897](https://doi.org/10.5281/zenodo.7261897) Accessed: November 19, 2024\n\nFire perimeter data:\n\nState of California, Kimberly Wallin. (2024). CAL FIRE: May 2024 (2024.05.14). [https://catalog.data.gov/dataset/california-fire-perimeters-all-b3436](https://catalog.data.gov/dataset/california-fire-perimeters-all-b3436) Accessed: November 19, 2024\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}