[
  {
    "objectID": "posts/2024-12-01-thomas-fire/index.html",
    "href": "posts/2024-12-01-thomas-fire/index.html",
    "title": "Analyzing the Impact of the Thomas Fire in Python",
    "section": "",
    "text": "About\nThe Thomas Fire burned over 280,000 acres (about 440 square miles) across Ventura and Santa Barbara counties in December 2017, the largest wildfire in modern California history at the time. The main catalyst for the fire’s rapid spread was unseasonably strong Santa Ana wind that brought warm air and low humidity. In the end, 1,063 structures were lost, over 104,607 residents were forced to leave their homes, and damages totaled over $2.2 billion. Lasting environmental effects of the fire included poor air quality and mudflows during the successive rainy season as a result of the vegetation loss1.\nThe first analysis2 uses imagery taken by Landsat 8 on January 16, 2018 to highlight the burn scar left by the Thomas Fire after it was considered fully contained (January 12, 2018). By assigning infrared bands to visible colors (short wave infrared to ‘red’, near infrared to ‘green’, and red to ‘blue’), we can easily distinguish the burn scar from the surrounding vegetation. Bare earth/dead vegetation reflects swir (short wave infrared), appearing red, and healthy vegetation reflects nir (near infrared), appearing green, in the false color image3. We can then match the burn scar with the Thomas Fire perimeter, isolated from a fire perimeters dataset.\nThe second analysis4 uses Air Quality Index (AQI) data from the US Environmental Protection Agency to visualize the impact on the AQI of the 2017 Thomas Fire.\n\n\nHighlights\nAnalysis 1:\n\nThis task explores assigning infrared bands to visible colors to obtain false color imagery.\nNecessary steps include cleaning rasters with the rioxarray package as well as filtering geo-dataframes with geopandas package.\nIt is essential to match the Coordinate Reference Systems (CRSs) of shapefiles and rasters to obtain the final figure.\n\nAnalysis 2:\n\nThis task uses pandas to wrangle dataframes.\nIt requires working with various datatypes, such as dates.\nUsing matplotlib.pyplot, we can create engaging visualizations!\n\n\n\nRepository\nMore detailed information can be found on my Thomas Fire GitHub Repository.\n\nRepository structure:\n├── data\n│  ├── thomas_fire.cpg\n│  ├── thoams_fire.dbf\n│  ├── thomas_fire.prj\n│  ├── thomas_fire.shp\n│  └── thomas_fire.shx\n├── .gitignore\n├── README.md\n├── aqi-analysis.ipynb\n├── false-color-analysis.ipynb\n└── fire-perimeter.ipynb\n\n\n\nDataset Descriptions\nLandsat Data:\nThe landsat dataset used in this analysis is a cleaned, simplified collection of bands (red, green, blue, nir, swir) from Landsat Collection 2 Level-2 (collected by Landsat 8 satellite) that was prepared specifically for this project.\nFire Perimeters Data:\nThe fire perimeters dataset is an open-source dataset that contains information about the spatial distrubtion of past fires in California published by the State of California (and downloaded as a shapefile).\nAQI Data:\nThis analysis directly imports the US AQI (by county) data for 2017 and 2018 via zip file. Both datasets will need to be filtered for Santa Barbara county.\n\n\nAnalysis\n\nPart 1\nDerived from fire-perimeter.ipynb.\nFirst, import all necessary packages.\nimport os\nimport pandas as pd\nimport geopandas as gpd\nimport xarray as xr\nThen, import the fire perimeters dataset (shapefile) and filter for the 2017 Thomas Fire. Save the filtered dataset in a format of your choice. I chose to save it as a shapefile due to its versatility and familiarity.\nNote: I saved the full fire perimeters dataset in my data/ folder in a separate no_push/ folder that was added to my .gitignore due to the size of the data.\n# Create filepath\nfp = os.path.join(\"data\", \"no_push\", \"California_Fire_Perimeters_(all).shp\")\n\n# Read in data\nfire_perimeter = gpd.read_file(fp)\n\n# Lower column names\nfire_perimeter.rename(columns=str.lower, inplace=True)\n\n# Select Thomas Fire boundary by filtering for name and year\nthomas_fire = fire_perimeter.loc[(fire_perimeter['fire_name'] == \"THOMAS\") & \n                                 (fire_perimeter['year_']== 2017)]\n                                 \n# Save Thomas Fire boundary as a shapefile\nthomas_fire.to_file(os.path.join(\"data\", \"thomas_fire.shp\"))\n\n\nPart 2\nDerived from false-color-analysis.ipynb.\nFirst, import all necessary packages.\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport geopandas as gpd\nimport xarray as xr\nimport rioxarray as rioxr\nimport numpy as np\nNext, import the landsat data (which has been pre-processed and saved on the server at the given filepath: /courses/EDS220/data/hwk4_landsat_data\", \"landsat8-2018-01-26-sb-simplified.nc).\n# Import data\nfp = os.path.join(\"/courses/EDS220/data/hwk4_landsat_data\", \"landsat8-2018-01-26-sb-simplified.nc\")\nlandsat = rioxr.open_rasterio(fp)\nlandsat\n\n\n\n\n\nNotice that the raster has a dimension, band, of size one. This dimension is not necessary, so we will use the squeeze() and drop_vars() functions to remove it.\n# Drop the 'band' dimension\nlandsat = landsat.squeeze().drop_vars('band')\n\n# Confirm 'band' was dropped\nprint(landsat.dims, landsat.coords)\nConfirm that band no longer appears on the list of dimensions (landsat.dims).\n\n\n\n\n\nNow we can plot a true color image. To do this, we must select the ‘red’, ‘green’, and ‘blue’ bands, in that order, and assign them to the ‘red’, ‘green’, and ‘blue’ colors using .imshow().\n# Select 'red', 'green', and 'blue' variables and plot\nlandsat[['red', 'green', 'blue']].to_array().plot.imshow()\nSince there are outliers in these data, the initial plot is black and white and gives us the following warning message:\n\n\n\n\n\nIn order to de-weight the outliers and properly scale each band, we will set the robust parameter in .imshow() to True.\n# Adjust the scale for a true color plot\nlandsat[['red', 'green', 'blue']].to_array().plot.imshow(robust = True)\nThis produces our true color image:\n\n\n\n\n\nTo create our false color image, we must assign the short wave infrared band (‘swir22’) to the ‘red’ color, the near infrared band (‘nir08’) to the ‘green’ color, and ‘red’ band to the ‘blue’ color using the same function.\n# Create a false color image\nlandsat[['swir22', 'nir08', 'red']].to_array().plot.imshow(robust = True)\nThe result is our false color image:\n\n\n\n\n\nFinally, we can create our figure.\nIn order to do this, we must import the Thomas Fire perimeter shapefile we previously saved in Part 1, thomas_fire.shp, and check to see that the CRS of the shapefile matches that of the landsat data using .crs (from the geopandas package) for the shapefile and .rio.crs (from the rioxarray package) for the raster.\n# Import Thomas Fire shapefile\nthomas_fire = gpd.read_file(os.path.join(\"data\", \"thomas_fire.shp\"))\n\n# Make sure CRSs match\nif thomas_fire.crs == landsat.rio.crs:\n    print(\"CRSs match!\")\nelse:\n    landsat = landsat.rio.reproject(thomas_fire.crs)\n    assert landsat.rio.crs == thomas_fire.crs\n    print(\"We matched the CRSs!\")\n\n\n\n\n\nTo plot the image, we must create an aspect ratio to correctly display the size. The aspect ratio is the width/height.\n# Map the false color image with the fire perimeter\nlandsat_aspect_ratio = landsat.rio.width/landsat.rio.height\nThen, the figure is set up using the aspect ratio, and each figure element is plotted in sequence using the matplotlib package.\n# Setup figure\nfig, ax = plt.subplots(figsize = (6, 6*landsat_aspect_ratio))\n\n# Turn the axis off\nax.axis(\"off\")\n\n# Plot the false color image on the figure\nlandsat[['swir22', 'nir08', 'red']].to_array().plot.imshow(ax = ax,\n                                                        robust = True)\n\n# Add Thomas Fire shapefile as a boundary on the figure\nthomas_fire.boundary.plot(ax = ax,\n                         color = \"black\")\n\n# Add legend to the figure\nax.legend(labels = [\"Fire Boundary\"])\n\n# Add annotation to the figure\nfig.text(0.5, 0.1,\n        'Data Source: CAL FIRE via Data.gov &  Microsof Planetary Computer data catalogue',\n         ha='center', va='center', fontsize=8, color='black', fontstyle='italic')\n\nfig.text(0.395, 0.08, \n         'Date Accessed: 11/19/24',\n         ha='right', va='center', fontsize=8, color='black', fontstyle='italic')\n\n# Add title\nax.set_title(\"Thomas Fire Scar (2017)\", fontsize=14, fontweight='bold')\n\nplt.show()\nOur final figure shows the burn scar of the Thomas Fire, displayed in red and outlined by the fire boundary.\n\n\n\n\n\n\n\nPart 3\nDerived from aqi-analysis.ipynb.\nFirst, import all necessary packages.\nimport pandas as pd\nimport matplotlib.pyplot as plt\nNext, read in the data from the links and concat (stack) the dataframes. Then, clean the column names.\n# Read in data\naqi_17 = pd.read_csv(\"https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2017.zip\", compression = 'zip')\naqi_18 = pd.read_csv(\"https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2018.zip\", compression = 'zip')\n\n# Concat the two data frames\naqi = pd.concat([aqi_17, aqi_18])\n\n# Simplify column names\naqi.columns = (aqi.columns\n                  .str.lower()\n                  .str.replace(' ','_'))\nFilter for county “Santa Barbara,” and remove the state_name, county_name, state_code, and county_code columns.\n# Select only data from Santa Barbara County\naqi_sb = aqi[aqi['county_name'] == \"Santa Barbara\"]\n\n# Remove specified columns\naqi_sb = aqi_sb.drop(columns = ['state_name', 'county_name', 'state_code', 'county_code'])\nUpdate the date column to datetime object, and then set it as the index.\n# Update `date` to datetime object\naqi_sb.date = pd.to_datetime(aqi_sb.date)\n\n# Update the index to be the date column\naqi_sb = aqi_sb.set_index('date')\nCalculate the 5-day rolling mean, and add it as a new column.\n# Add AQI 5-day rolling mean to `aqi_sb` data frame\naqi_sb['five_day_average'] = aqi_sb['aqi'].rolling('5D').mean()\nPlot the AQI for Santa Barbara county 2017-2018.\n# Plot AQI and AQI rolling mean \naqi_sb.drop(columns = 'number_of_sites_reporting').plot.line(y = ['aqi', 'five_day_average'])\n\n# Add title\nplt.title(\"AQI in Santa Barbara County 2017-2018\")\n\n# Label x-axis\nplt.xlabel(\"Date\")\n\n# Label y-axis\nplt.ylabel(\"AQI\")\n\n# Add legend\nplt.legend(['AQI', 'Five Day Average'])\n\n\n\n\n\nOur graph clearly shows a spike in AQI at the time of the Thomas Fire.\n\n\n\nReferences\nLandsat data:\nMicrosoft Open Source, Matt McFarland, Rob Emanuele, Dan Morris, & Tom Augspurger. (2022). microsoft/PlanetaryComputer: October 2022 (2022.10.28). Zenodo. https://doi.org/10.5281/zenodo.7261897 Accessed: November 19, 2024\nFire perimeter data:\nState of California, Kimberly Wallin. (2024). CAL FIRE: May 2024 (2024.05.14). https://catalog.data.gov/dataset/california-fire-perimeters-all-b3436 Accessed: November 19, 2024\nAQI Data:\nU.S. Enivornmental Protection Agency. (2024). Air Quality Index Daily Values Report: July 2024 (2024.07.23). https://www.epa.gov/outdoor-air-quality-data/air-quality-index-daily-values-report Accessed: October 22, 2024\n\n\n\n\n\nFootnotes\n\n\nRead more about the Thomas fire here.↩︎\nThis analysis was part of EDS 220: Working with Environmental Datasets - Homework Assignment 4. See the assignment guidelines here.↩︎\nRead more about false color imagery here.↩︎\nThis analysis was part of EDS 220: Working with Environmental Datasets - Homework Assignment 2. See the assignment guidelines here.↩︎"
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire/false-color-analysis.html",
    "href": "posts/2024-12-01-thomas-fire/false-color-analysis.html",
    "title": "Carmen Hoyt",
    "section": "",
    "text": "title: “My First Post” description: “A short catchy description of the blog post.” author: - name: Carmen Hoyt url: https://ceh58.github.io/ affiliation: MEDS affiliation-url: https://bren.ucsb.edu/masters-programs/master-environmental-data-science date: 2024-10-18 categories: [Quarto, MEDS, something-cool] toc: true page-layout: full image: whales.jpg citation: url: https://ceh58.github.io/posts/2024-10-18-my-first-post/ draft: true"
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire/false-color-analysis.html#carmen-hoyt",
    "href": "posts/2024-12-01-thomas-fire/false-color-analysis.html#carmen-hoyt",
    "title": "Carmen Hoyt",
    "section": "Carmen Hoyt",
    "text": "Carmen Hoyt\n\nGitHub Repo\n\n\nAbout:\n\nPurpose:\n\nThe purpose of this task is to use false color imagery to visualize the impact (the burn scar) of the Thomas Fire in 2017.\n\nHighlights:\n\nThis task explores assigning infrared bands to visible colors and plotting shapefiles over the resulting images. Necessary steps include cleaning rasters and matching Coordinate Reference Systems (CRSs).\n\nDataset description:\n\nLandsat Data: Pre-processed, simplified collection of bands (red, green, blue, nir, swir) from Landsat Collection 2 Level-2 (collected by Landsat 8 satellite). Accessed: November 19, 2024\n\nReferences:\n\nLandsat Data: Microsoft Open Source, Matt McFarland, Rob Emanuele, Dan Morris, & Tom Augspurger. (2022). microsoft/PlanetaryComputer: October 2022 (2022.10.28). Zenodo. https://doi.org/10.5281/zenodo.7261897\nFor Fire Perimeter data information, see fire-perimeter.ipynb.\n\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport geopandas as gpd\nimport xarray as xr\nimport rioxarray as rioxr\nimport numpy as np"
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire/false-color-analysis.html#true-color-image",
    "href": "posts/2024-12-01-thomas-fire/false-color-analysis.html#true-color-image",
    "title": "Carmen Hoyt",
    "section": "3. True Color Image",
    "text": "3. True Color Image\n\n# a. Import data\nfp = os.path.join(\"/courses/EDS220/data/hwk4_landsat_data\", \"landsat8-2018-01-26-sb-simplified.nc\")\nlandsat = rioxr.open_rasterio(fp)\nlandsat.head(3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset> Size: 424B\nDimensions:      (band: 1, x: 3, y: 3)\nCoordinates:\n  * band         (band) int64 8B 1\n  * x            (x) float64 24B 1.213e+05 1.216e+05 1.218e+05\n  * y            (y) float64 24B 3.952e+06 3.952e+06 3.952e+06\n    spatial_ref  int64 8B 0\nData variables:\n    red          (band, y, x) float64 72B ...\n    green        (band, y, x) float64 72B ...\n    blue         (band, y, x) float64 72B ...\n    nir08        (band, y, x) float64 72B ...\n    swir22       (band, y, x) float64 72B ...xarray.DatasetDimensions:band: 1x: 3y: 3Coordinates: (4)band(band)int641array([1])x(x)float641.213e+05 1.216e+05 1.218e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845.])y(y)float643.952e+06 3.952e+06 3.952e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[9 values with dtype=float64]green(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[9 values with dtype=float64]blue(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[9 values with dtype=float64]nir08(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[9 values with dtype=float64]swir22(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[9 values with dtype=float64]Indexes: (3)bandPandasIndexPandasIndex(Index([1], dtype='int64', name='band'))xPandasIndexPandasIndex(Index([121305.0, 121575.0, 121845.0], dtype='float64', name='x'))yPandasIndexPandasIndex(Index([3952395.0, 3952125.0, 3951855.0], dtype='float64', name='y'))Attributes: (0)\n\n\n\n# b. Preliminary exploration\nprint('Sizes of dimensions:', dict(landsat.sizes))\nprint('attrs:', landsat.attrs)\nprint(landsat.dims, landsat.coords)\nlandsat\n\nSizes of dimensions: {'band': 1, 'x': 870, 'y': 731}\nattrs: {}\nFrozenMappingWarningOnValuesAccess({'band': 1, 'x': 870, 'y': 731}) Coordinates:\n  * band         (band) int64 8B 1\n  * x            (x) float64 7kB 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * y            (y) float64 6kB 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n    spatial_ref  int64 8B 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset> Size: 25MB\nDimensions:      (band: 1, x: 870, y: 731)\nCoordinates:\n  * band         (band) int64 8B 1\n  * x            (x) float64 7kB 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * y            (y) float64 6kB 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n    spatial_ref  int64 8B 0\nData variables:\n    red          (band, y, x) float64 5MB ...\n    green        (band, y, x) float64 5MB ...\n    blue         (band, y, x) float64 5MB ...\n    nir08        (band, y, x) float64 5MB ...\n    swir22       (band, y, x) float64 5MB ...xarray.DatasetDimensions:band: 1x: 870y: 731Coordinates: (4)band(band)int641array([1])x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]nir08(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]swir22(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Indexes: (3)bandPandasIndexPandasIndex(Index([1], dtype='int64', name='band'))xPandasIndexPandasIndex(Index([121305.0, 121575.0, 121845.0, 122115.0, 122385.0, 122655.0, 122925.0,\n       123195.0, 123465.0, 123735.0,\n       ...\n       353505.0, 353775.0, 354045.0, 354315.0, 354585.0, 354855.0, 355125.0,\n       355395.0, 355665.0, 355935.0],\n      dtype='float64', name='x', length=870))yPandasIndexPandasIndex(Index([3952395.0, 3952125.0, 3951855.0, 3951585.0, 3951315.0, 3951045.0,\n       3950775.0, 3950505.0, 3950235.0, 3949965.0,\n       ...\n       3757725.0, 3757455.0, 3757185.0, 3756915.0, 3756645.0, 3756375.0,\n       3756105.0, 3755835.0, 3755565.0, 3755295.0],\n      dtype='float64', name='y', length=731))Attributes: (0)\n\n\nThis array has three dimensions, and one band (band) with five variables: red, green, blue, nir08, and swir22. There were no attributes included.\n\n# c. Drop the 'band' dimension\nlandsat = landsat.squeeze().drop_vars('band')\n\n\n# Confirm 'band' was dropped\nprint(landsat.dims, landsat.coords)\n\nFrozenMappingWarningOnValuesAccess({'x': 870, 'y': 731}) Coordinates:\n  * x            (x) float64 7kB 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * y            (y) float64 6kB 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n    spatial_ref  int64 8B 0\n\n\n\n# d. Select 'red', 'green', and 'blue' variables and plot\nlandsat[['red', 'green', 'blue']].to_array().plot.imshow()\n\nClipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n\n\n<matplotlib.image.AxesImage at 0x7fd656a5a810>\n\n\n\n\n\n\n# e. Adjust the scale for a true color plot\nlandsat[['red', 'green', 'blue']].to_array().plot.imshow(robust = True)\n\n<matplotlib.image.AxesImage at 0x7fd6550d99d0>\n\n\n\n\n\n\nThe first plot is black and white while the second is in true color. The robust parameter, when set to True, de-weights outliers to properly scale the color bands and produce a colored image."
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire/false-color-analysis.html#false-color-image",
    "href": "posts/2024-12-01-thomas-fire/false-color-analysis.html#false-color-image",
    "title": "Carmen Hoyt",
    "section": "4. False color image",
    "text": "4. False color image\n\n# Create a false color image\nlandsat[['swir22', 'nir08', 'red']].to_array().plot.imshow(robust = True)\n\n<matplotlib.image.AxesImage at 0x7fd65419a290>"
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire/false-color-analysis.html#map",
    "href": "posts/2024-12-01-thomas-fire/false-color-analysis.html#map",
    "title": "Carmen Hoyt",
    "section": "5. Map",
    "text": "5. Map\n\n# Import Thomas Fire shapefile\nthomas_fire = gpd.read_file(os.path.join(\"data\", \"thomas_fire.shp\"))\n\n\n# Make sure CRSs match\nif thomas_fire.crs == landsat.rio.crs:\n    print(\"CRSs match!\")\nelse:\n    landsat = landsat.rio.reproject(thomas_fire.crs)\n    assert landsat.rio.crs == thomas_fire.crs\n    print(\"We matched the CRSs!\")\n\nWe matched the CRSs!\n\n\n\n# a. Map the false color image with the fire perimeter\nlandsat_aspect_ratio = landsat.rio.width/landsat.rio.height\n\nfig, ax = plt.subplots(figsize = (6, 6*landsat_aspect_ratio))\n\nax.axis(\"off\")\n\nlandsat[['swir22', 'nir08', 'red']].to_array().plot.imshow(ax = ax,\n                                                        robust = True)\n\nthomas_fire.boundary.plot(ax = ax,\n                         color = \"black\")\n\nax.legend(labels = [\"Fire Boundary\"])\n\nfig.text(0.5, 0.1,\n        'Data Source: CAL FIRE via Data.gov &  Microsof Planetary Computer data catalogue',\n         ha='center', va='center', fontsize=8, color='black', fontstyle='italic')\n\nfig.text(0.395, 0.08, \n         'Date Accessed: 11/19/24',\n         ha='right', va='center', fontsize=8, color='black', fontstyle='italic')\n\nax.set_title(\"Thomas Fire Scar (2017)\", fontsize=14, fontweight='bold')\n\nplt.show()\n\n\n\n\n\nThis figure shows the burn scar from the Thomas Fire in 2017. By assigning infrared bands to visible colors (short wave infrared to red, near infrared to green, and red to blue), we can easily distinguish the burn scar from the surrounding vegetation. This is because bare earth reflects swir (short wave infrared), appearing red, and healthy vegetation reflects nir (near infrared), appearing green."
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Blog",
    "section": "",
    "text": "False Color Analysis\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnalyzing the Impact of the Thomas Fire in Python\n\n\n\nPython\n\n\nEDS220\n\n\nLandsat\n\n\n\n\n\n\n\nCarmen Hoyt\n\n\nDec 4, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  }
]