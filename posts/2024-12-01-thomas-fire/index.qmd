---
title: "Using False Color Imagery to Visualize the Impact of the Thomas Fire in Python"
#description: "blog post description (appears underneath the title in smaller text) which is included on the listing page"
author:
  - name: Carmen Hoyt
    url: https://ceh58.github.io/
    #orcid: 0000-0002-5300-3075
    affiliation: Master of Environmental Data Science Program @ The Bren School (UCSB)
    affiliation-url: https://ucsb-meds.github.io/ 
date: last-modified
categories: [Python, EDS220, Landsat] # self-defined categories
toc: true
#citation: 
 # url: https://ceh58.github.io/posts/2024-12-01-thomas-fire/ 
image: thomas-fire.jpg
draft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!
---

```{r}
#| echo: false
knitr::include_graphics("thomas-fire.jpg")
```

# About

The Thomas Fire burned over 280,000 acres (about 440 square miles) across Ventura and Santa Barbara counties in December 2017, securing it as the largest wildfire in modern California history at the time. The main catalyst for the fire's rapid spread were unseasonably strong Santa Ana winds that brought warm air and low humidity. In the end, 1,063 structures were lost, over 104,607 residents were forced to leave their homes, and damages totaled over $2.2 billion. Lasting environmental effects of the fire included poor air quality (Assignment 2?!) and mudflows during the successive rainy season as a result of the burned vegetation[^1].

[^1]: Read more about the Thomas fire [here](https://en.wikipedia.org/wiki/Thomas_Fire).

This analysis uses imagery taken by Landsat 8 on January 16, 2018 to highlight the burn scar left by the Thomas Fire after it was considered fully contained (January 12, 2018). By assigning infrared bands to visible colors (short wave infrared to red, near infrared to green, and red to blue), we can easily distinguish the burn scar from the surrounding vegetation. This is because bare earth/dead vegetation reflects swir (short wave infrared), appearing red, and healthy vegetation reflects nir (near infrared), appearing green[^2].

[^2]: Read more about false color imagery [here](https://earthobservatory.nasa.gov/features/FalseColor).

# Highlights

- This task explores assigning infrared bands to visible colors to obtain false color imagery.

- Necessary steps include cleaning rasters and filtering geo-dataframes for the desired information.

- It is essential to match Coordinate Reference Systems (CRSs) of shapefiles and images to obtain the final plot.

# Repository

[Thomas Fire GitHub Repository](https://github.com/ceh58/eds220-hwk4-repeat)

```
├── data
│  ├── thomas_fire.cpg
│  ├── thoams_fire.dbf
│  ├── thomas_fire.prj
│  ├── thomas_fire.shp
│  └── thomas_fire.shx
├── .gitignore
├── README.md
├── hwk4-task2-false-color-HOYT.ipynb
└── hwk4-task2-fire-perimeter-HOYT.ipynb
```

# Dataset Descriptions

#### Landsat Data:

A cleaned, simplified collection of bands (red, green, blue, nir, swir) from Landsat Collection 2 Level-2 (collected by Landsat 8 satellite).

Microsoft Open Source, Matt McFarland, Rob Emanuele, Dan Morris, & Tom Augspurger. (2022). microsoft/PlanetaryComputer: October 2022 (2022.10.28). Zenodo. [https://doi.org/10.5281/zenodo.7261897](https://doi.org/10.5281/zenodo.7261897) Accessed: November 19, 2024

#### Fire Perimeters Data:

Open-source data containing information from the spatial distrubtion of past fires in California published by the State of California and downloaded as a shapefile. 
Accessed: November 19, 2024

State of California, Kimberly Wallin. (2024). CAL FIRE: May 2024 (2024.05.14). [https://catalog.data.gov/dataset/california-fire-perimeters-all-b3436](https://catalog.data.gov/dataset/california-fire-perimeters-all-b3436) Accessed: November 19, 2024

# Analysis

#### From `hwk4-task2-fire-perimeter-HOYT.ipynb`

First, import all necessary packages.
```
import os
import pandas as pd
import geopandas as gpd
import xarray as xr
```

Then, import the dataset and filter for the 2017 Thomas Fire. Save the filtered dataset in a format of your choice (I chose to save it as a shapefile).
```
# Create filepath
fp = os.path.join("data", "no_push", "California_Fire_Perimeters_(all).shp")

# Read in data
fire_perimeter = gpd.read_file(fp)

# Lower column names
fire_perimeter.rename(columns=str.lower, inplace=True)

# Select Thomas Fire boundary
thomas_fire = fire_perimeter.loc[(fire_perimeter['fire_name'] == "THOMAS") & 
                                 (fire_perimeter['year_']== 2017)]
                                 
# Save Thomas Fire boundary
thomas_fire.to_file(os.path.join("data", "thomas_fire.shp"))
```

#### From `hwk4-task2-false-color-HOYT.ipynb`

First, import all necessary packages.
```
import os
import pandas as pd
import matplotlib.pyplot as plt
import geopandas as gpd
import xarray as xr
import rioxarray as rioxr
import numpy as np
```

Then, import the landsat data which has been pre-processed and saved on the server.
```
# Import data
fp = os.path.join("/courses/EDS220/data/hwk4_landsat_data", "landsat8-2018-01-26-sb-simplified.nc")
landsat = rioxr.open_rasterio(fp)
```

The xarray has a band of dimension one. This dimension is not necessary, so we will use the `squeeze()` and `drop_vars()` functions to remove it.

```
# Drop the 'band' dimension
landsat = landsat.squeeze().drop_vars('band')

# Confirm 'band' was dropped
print(landsat.dims, landsat.coords)
```

The next step is to plot a true color image.

```
# Select 'red', 'green', and 'blue' variables and plot
landsat[['red', 'green', 'blue']].to_array().plot.imshow()
```

Since there are outlier values, the initial plot is black and white and gives us warning message.

```{r}
#| echo: false
knitr::include_graphics("true_color_1.png")
```

In order to de-weight the outliers and properly scale each band, we will use the `robust` parameter in `.imshow()`.

```
# Adjust the scale for a true color plot
landsat[['red', 'green', 'blue']].to_array().plot.imshow(robust = True)
```

This produces our true color image.

```{r}
#| echo: false
knitr::include_graphics("true_color_2.png")
```

To create our false color image, we must assign swir22 to the red band, nir08 to the green band, and red to the blue band. 

```
# Create a false color image
landsat[['swir22', 'nir08', 'red']].to_array().plot.imshow(robust = True)
```

```{r}
#| echo: false
knitr::include_graphics("false_color.png")
```

Finally, we can create our final map. We must import our saved shapefile and make sure the CRSs match.

```
# Import Thomas Fire shapefile
thomas_fire = gpd.read_file(os.path.join("data", "thomas_fire.shp"))

# Make sure CRSs match
if thomas_fire.crs == landsat.rio.crs:
    print("CRSs match!")
else:
    landsat = landsat.rio.reproject(thomas_fire.crs)
    assert landsat.rio.crs == thomas_fire.crs
    print("We matched the CRSs!")
    
# Map the false color image with the fire perimeter
landsat_aspect_ratio = landsat.rio.width/landsat.rio.height

fig, ax = plt.subplots(figsize = (6, 6*landsat_aspect_ratio))

ax.axis("off")

landsat[['swir22', 'nir08', 'red']].to_array().plot.imshow(ax = ax,
                                                        robust = True)

thomas_fire.boundary.plot(ax = ax,
                         color = "black")

ax.legend(labels = ["Fire Boundary"])

fig.text(0.5, 0.1,
        'Data Source: CAL FIRE via Data.gov &  Microsof Planetary Computer data catalogue',
         ha='center', va='center', fontsize=8, color='black', fontstyle='italic')

fig.text(0.395, 0.08, 
         'Date Accessed: 11/19/24',
         ha='right', va='center', fontsize=8, color='black', fontstyle='italic')

ax.set_title("Thomas Fire Scar (2017)", fontsize=14, fontweight='bold')

plt.show()
```

```{r}
#| echo: false
knitr::include_graphics("final_plot.png")
```


# References


